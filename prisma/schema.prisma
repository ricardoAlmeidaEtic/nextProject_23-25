generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  friendsAsUser Friends[]  @relation("FriendsUser")
  friendsAsFriend Friends[] @relation("FriendsFriend")
  playlists     Playlist[]
  comments      Comment[]

  @@map("users")
}

model Friends {
  id        Int    @id @default(autoincrement())
  userId    String
  friendId  String
  user      User   @relation("FriendsUser", fields: [userId], references: [id])
  friend    User   @relation("FriendsFriend", fields: [friendId], references: [id])
}

model Playlist {
  id      Int      @id @default(autoincrement())
  name    String
  userId  String
  user    User     @relation(fields: [userId], references: [id])
  musics  Music[]
}

model Music {
  id          Int        @id @default(autoincrement())
  title       String
  artist      String
  duration    String
  image       String
  audioUrl    String
  streamCount Int
  likes       Int
  dislikes    Int
  playlists   Playlist[]
  comments    Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   // The text of the comment
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   // Foreign key to the User model
  musicId   Int      // Foreign key to the Music model
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  music     Music    @relation(fields: [musicId], references: [id], onDelete: Cascade)
}